Link 2 resources together by making use of resource attribute
--output of 1 resource as an input of another

root@TerraformManager:/opt/terraform_hcl# cat main.tf
resource "local_file" "pets" {
  filename        = "/root/pets.txt"
  content         = "My fav pet is ${random_pet.animal.id}"
  file_permission = "0700"
}


resource "random_pet" "animal"{
prefix = "Mr. "
separator = "."
length = 1
}


-----------------------------------------------
Resource dependencies 

Implicit Dependencies: 

Like shown in above example: radom pet will run first then local file.
Also at time of destroy local file will destroy first then randon 

As we are not specifing , terraform is figuring out by itself

Ecplicit dependency:(using depends_on)

root@TerraformManager:/opt/terraform_hcl# cat main.tf
resource "local_file" "pets" {
  filename        = "/root/pets.txt"
  content         = "My fav pet is parrot"
  file_permission = "0700"
  
  depends_on = [
  random_pet.animal
  ]
}

resource "random_pet" "animal"{
prefix = "Mr. "
separator = "."
length = 1
}

--------------------------------------------------

Output Variables:

Can be used to store value of an expression in terraform


root@TerraformManager:/opt/terraform_hcl# cat main.tf
resource "local_file" "pets" {
  filename        = "/root/pets.txt"
  content         = "My fav pet is ${random_pet.animal.id}"
  file_permission = "0700"
}


resource "random_pet" "animal"{
prefix = "Mr. "
separator = "."
length = 1
}

output pet_name{
value = random_pet.animal.id
description = record the value of pet Id generated by the random pet resource
}

once we run terraform apply we can see output variable printed on screen

--> terraform output # to print the value of output variable
--> We can also use below command to specifically pront the value of an existing output variable
terraform output pet_name
--> mainly used to paas these to Adhoc script or ansible playbboks
